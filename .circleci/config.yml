version: 2.1

orbs:
  codecov: codecov/codecov@1.1.3

jobs:
  test:
    working_directory: ~/ordersvc
    docker:
      - image: $DOCKER_IMAGE_TAG
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: test_password
    environment:
      DB_NAME: circleci
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: circleci
      DB_PASSWORD: test_password
    steps:
      - run:
          name: Install curl and bash
          command: |
            apk update
            apk add curl curl-dev
            apk add bash bash-dev
            apk add postgresql-dev gcc python3-dev musl-dev
      - run:
          name: Install postgresql and run
          command: |
            apk add postgresql-client
            psql -U circleci -h localhost -p 5432 -c 'create extension ltree'
      - checkout
      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Package Setup
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            cd src
            pytest . --cov=. --cov-report=xml:./coverage.xml -c tests/pytest.ini --flake8
      - codecov/upload:
          file: 'coverage.xml'
          token: $CODECOV_TOKEN
      - persist_to_workspace:
          root: .
          paths:
              - .
  publish:
    docker:
      - image: docker:18.09.0
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: build docker image
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_ID" --password-stdin
            docker build -f Dockerfile.prod -t $DOCKER_IMAGE_TAG .
            docker push $DOCKER_IMAGE_TAG
  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: deploy
          command: |
            ssh ubuntu@"$SERVER_ADDRESS" bash ./deploy.sh

workflows:
  version: 2
  CI-CD:
    jobs:
      - test
      - publish:
          requires:
            - test
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only: main
